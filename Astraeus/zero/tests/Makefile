# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../../tools/gtest

# Where to find user code.
USER_DIR = ../src

TEST_DIR = .

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I$(USER_DIR)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = ship_unittest bullet_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS) run

clean :
	cd build
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o build/$@

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o build/$@

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) build/$@ build/gtest-all.o 

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) build/$@ build/gtest-all.o build/gtest_main.o 

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

bullet.o : $(USER_DIR)/bullet.cpp $(USER_DIR)/bullet.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/bullet.cpp -o build/$@

mockscenemanager.o : $(TEST_DIR)/mocks/mockscenemanager.cpp $(TEST_DIR)/mocks/mockscenemanager.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/mocks/mockscenemanager.cpp -o build/$@

actor.o : $(USER_DIR)/actor.cpp $(USER_DIR)/actor.h $(GTEST_HEADERS) 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/actor.cpp -o build/$@

ship.o : actor.o mockscenemanager.o $(USER_DIR)/ship.cpp $(USER_DIR)/ship.h $(GTEST_HEADERS) 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ship.cpp -o build/$@

ship_unittest.o : $(TEST_DIR)/ship_unittest.cpp \
                     $(USER_DIR)/ship.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/ship_unittest.cpp -o build/$@

ship_unittest : actor.o bullet.o mockscenemanager.o ship.o ship_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) \
	-lpthread  build/actor.o build/bullet.o build/mockscenemanager.o build/ship.o \
	build/ship_unittest.o build/gtest_main.a -o build/$@

bullet_unittest.o : $(TEST_DIR)/bullet_unittest.cpp \
			$(USER_DIR)/bullet.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/bullet_unittest.cpp -o build/$@

bullet_unittest : bullet.o bullet_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) \
	-lpthread build/bullet.o build/bullet_unittest.o build/gtest_main.a -o build/$@
run:
	./build/ship_unittest
	./build/bullet_unittest
